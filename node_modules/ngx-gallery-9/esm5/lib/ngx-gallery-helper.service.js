import { __decorate } from "tslib";
import { Injectable, Renderer2, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NgxGalleryHelperService = /** @class */ (function () {
    function NgxGalleryHelperService(renderer) {
        this.renderer = renderer;
        this.swipeHandlers = new Map();
    }
    NgxGalleryHelperService.prototype.manageSwipe = function (status, element, id, nextHandler, prevHandler) {
        var handlers = this.getSwipeHandlers(id);
        // swipeleft and swiperight are available only if hammerjs is included
        try {
            if (status && !handlers) {
                this.swipeHandlers.set(id, [
                    this.renderer.listen(element.nativeElement, 'swipeleft', function () { return nextHandler(); }),
                    this.renderer.listen(element.nativeElement, 'swiperight', function () { return prevHandler(); })
                ]);
            }
            else if (!status && handlers) {
                handlers.map(function (handler) { return handler(); });
                this.removeSwipeHandlers(id);
            }
        }
        catch (e) { }
    };
    NgxGalleryHelperService.prototype.validateUrl = function (url) {
        if (url.replace) {
            return url.replace(new RegExp(' ', 'g'), '%20')
                .replace(new RegExp('\'', 'g'), '%27');
        }
        else {
            return url;
        }
    };
    NgxGalleryHelperService.prototype.getBackgroundUrl = function (image) {
        return 'url(\'' + this.validateUrl(image) + '\')';
    };
    NgxGalleryHelperService.prototype.getSwipeHandlers = function (id) {
        return this.swipeHandlers.get(id);
    };
    NgxGalleryHelperService.prototype.removeSwipeHandlers = function (id) {
        this.swipeHandlers.delete(id);
    };
    NgxGalleryHelperService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
NgxGalleryHelperService.ɵfac = function NgxGalleryHelperService_Factory(t) { return new (t || NgxGalleryHelperService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
NgxGalleryHelperService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxGalleryHelperService, factory: function (t) { return NgxGalleryHelperService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxGalleryHelperService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
    return NgxGalleryHelperService;
}());
export { NgxGalleryHelperService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktaGVscGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZ2FsbGVyeS05L2xpYi9uZ3gtZ2FsbGVyeS1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2xFO3NCQUdFLGlDQUFvQix2REFIdEI7SUFHeUMsWUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVyx6Q0FGckIsSUFFbEIsaUNBQW9CLFFBQW1CO0NBRi9CLGtCQUFhLEdBQTRCLElBQUksR0FBRyxFQUFzQixDQUFDLGhDQUVwQyxRQUF2QixhQUFRLEdBQVIsUUFBUSxDQUFXO0dBQUcsQ0FBQyxLQUUzQyxUQUZ3QyxRQUZoQyxrQkFBYSxHQUE0QixJQUFJLEdBQUcsRUFBc0IsQ0FBQztBQUNqRixJQUM0QyxDQUFDO1FBRWhDLEdBQVgsVUFBWSxNQUFlLEVBQUUsT0FBbUIsRUFBRSxFQUFVLEVBQUUsV0FBcUIsRUFBRSxXQUFxQixZQUV0RyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsbEdBSDVCLElBQ0UsNkNBQVcsR0FBWCxVQUFZLE1BQWUsRUFBRSxPQUFtQixFQUFFLEVBQVUsRUFBRSxXQUFxQixFQUFFLFdBQXFCO0dBRWhFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FFM0MsakJBSjBHLFFBRTFHLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQ0FFMkIsU0FDdEUsSUFBSSxjQUNBLElBQUksTUFBTSxJQUFJLDlFQUh4QixRQUNNLHNFQUFzRTtBQUVuRCxRQUFRLEVBQUUsVkFEbkMsUUFBTSxJQUFJO2NBRUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsckNBRHJDLFlBQVUsSUFBSSxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDSSxFQUFFLHNCQUN2QixJQUFJLENBQUMsUUFB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YUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQywxQ0FEQyxRQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsTEFBSCxJQUFFLENBQUM7SUFFTyxxREFBbUIsR0FBM0IsVUFBNEIsRUFBVSx4RUFBeEMsSUFBVSxxREFBbUIsR0FBM0IsVUFBNEIsRUFBVTtRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyx0Q0FEUSxRQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDLExBQUgsSUFBRSxDQUFDO0FBQ0Y7Z0JBeEMrQixTQUFTLHpCQXlDMEIsZ0JBekNuQyxTQUFTO0FBQUc7SUFIL0IsdUJBQXVCLHdCQURuQyxVQUFVLEVBQUUsUUFDQSx1QkFBdUIsQ0EyQ25DLE1BQUQsOEJBQUMsR0FBQSxBQTNDRCxJQTJDQyxVQTNDWSxoSkFBQSx1QkFBdUIsd0JBRG5DLFVBQVUsRUFBRSxRQUNBLHVCQUF1QixDQTJDbkM7YUEzQ21DOzs7MEVBNENwQztBQUFDLElBREQsOEJBQUM7QUFDQSxDQURBLEFBM0NELElBMkNDOztBQTlDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neEdhbGxlcnlIZWxwZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzd2lwZUhhbmRsZXJzOiBNYXA8c3RyaW5nLCBGdW5jdGlvbltdPiA9IG5ldyBNYXA8c3RyaW5nLCBGdW5jdGlvbltdPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBtYW5hZ2VTd2lwZShzdGF0dXM6IGJvb2xlYW4sIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGlkOiBzdHJpbmcsIG5leHRIYW5kbGVyOiBGdW5jdGlvbiwgcHJldkhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7XG5cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5nZXRTd2lwZUhhbmRsZXJzKGlkKTtcblxuICAgICAgLy8gc3dpcGVsZWZ0IGFuZCBzd2lwZXJpZ2h0IGFyZSBhdmFpbGFibGUgb25seSBpZiBoYW1tZXJqcyBpcyBpbmNsdWRlZFxuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc3RhdHVzICYmICFoYW5kbGVycykge1xuICAgICAgICAgICAgICB0aGlzLnN3aXBlSGFuZGxlcnMuc2V0KGlkLCBbXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzd2lwZWxlZnQnLCAoKSA9PiBuZXh0SGFuZGxlcigpKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3N3aXBlcmlnaHQnLCAoKSA9PiBwcmV2SGFuZGxlcigpKVxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0dXMgJiYgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgaGFuZGxlcnMubWFwKChoYW5kbGVyKSA9PiBoYW5kbGVyKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN3aXBlSGFuZGxlcnMoaWQpO1xuICAgICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICB2YWxpZGF0ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICBpZiAodXJsLnJlcGxhY2UpIHtcbiAgICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UobmV3IFJlZ0V4cCgnICcsICdnJyksICclMjAnKVxuICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCdcXCcnLCAnZycpLCAnJTI3Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICB9XG4gIH1cblxuICBnZXRCYWNrZ3JvdW5kVXJsKGltYWdlOiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiAndXJsKFxcJycgKyB0aGlzLnZhbGlkYXRlVXJsKGltYWdlKSArICdcXCcpJztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3dpcGVIYW5kbGVycyhpZDogc3RyaW5nKTogRnVuY3Rpb25bXSB8IHVuZGVmaW5lZCB7XG4gICAgICByZXR1cm4gdGhpcy5zd2lwZUhhbmRsZXJzLmdldChpZCk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVN3aXBlSGFuZGxlcnMoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgdGhpcy5zd2lwZUhhbmRsZXJzLmRlbGV0ZShpZCk7XG4gIH1cbn1cbiJdfQ==