import { __decorate } from "tslib";
import { Injectable, Renderer2, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let NgxGalleryHelperService = class NgxGalleryHelperService {
    constructor(renderer) {
        this.renderer = renderer;
        this.swipeHandlers = new Map();
    }
    manageSwipe(status, element, id, nextHandler, prevHandler) {
        const handlers = this.getSwipeHandlers(id);
        // swipeleft and swiperight are available only if hammerjs is included
        try {
            if (status && !handlers) {
                this.swipeHandlers.set(id, [
                    this.renderer.listen(element.nativeElement, 'swipeleft', () => nextHandler()),
                    this.renderer.listen(element.nativeElement, 'swiperight', () => prevHandler())
                ]);
            }
            else if (!status && handlers) {
                handlers.map((handler) => handler());
                this.removeSwipeHandlers(id);
            }
        }
        catch (e) { }
    }
    validateUrl(url) {
        if (url.replace) {
            return url.replace(new RegExp(' ', 'g'), '%20')
                .replace(new RegExp('\'', 'g'), '%27');
        }
        else {
            return url;
        }
    }
    getBackgroundUrl(image) {
        return 'url(\'' + this.validateUrl(image) + '\')';
    }
    getSwipeHandlers(id) {
        return this.swipeHandlers.get(id);
    }
    removeSwipeHandlers(id) {
        this.swipeHandlers.delete(id);
    }
};
NgxGalleryHelperService.ɵfac = function NgxGalleryHelperService_Factory(t) { return new (t || NgxGalleryHelperService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
NgxGalleryHelperService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxGalleryHelperService, factory: function (t) { return NgxGalleryHelperService.ɵfac(t); } });
NgxGalleryHelperService.ctorParameters = () => [
    { type: Renderer2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxGalleryHelperService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
export { NgxGalleryHelperService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktaGVscGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZ2FsbGVyeS05L2xpYi9uZ3gtZ2FsbGVyeS1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2xFLElBQWEsdUJBQXVCLEdBQXBDLE1BQWE7a0JBQXVCLE9BR2xDLFlBQW9CLFFBQW1CLFlBQW5CLHpEQUh0QixJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtRQUdOLEdBQVIsUUFBUSxDQUFXLHBCQUZ6QyxJQUVFLFlBQW9CLFFBQW1CO0NBRi9CLGtCQUFhLEdBQTRCLElBQUksR0FBRyxFQUFzQixDQUFDLGhDQUVwQyxRQUF2QixhQUFRLEdBQVIsUUFBUSxDQUFXO0dBQUcsQ0FBQyxLQUUzQyxXQUFXLENBQUMsTUFBZSxFQUFFLE9BQW1CLEVBQUUsdENBRlYsUUFGaEMsa0JBQWEsR0FBNEIsSUFBSSxHQUFHLEVBQXNCLENBQUM7QUFJbkIsRUFBRSxGQUhoRSxJQUM0QyxDQUFDO09BRXdDLEVBQUUsV0FBcUIsWUFFdEcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHREQUg1QixJQUNFLFdBQVcsQ0FBQyxNQUFlLEVBQUUsT0FBbUIsRUFBRSxFQUFVLEVBQUUsV0FBcUIsRUFBRSxXQUFxQjtLQUVoRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBRTNDLG5CQUowRyxRQUUxRyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7cUNBRTJCLFNBQ3RFLElBQUksY0FDQSxJQUFJLE1BQU0sSUFBSSw5RUFIeEIsUUFDTSxzRUFBc0U7QUFFbkQsUUFBUSxFQUFFLFZBRG5DLFFBQU0sSUFBSTtjQUVJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLHJDQURyQyxZQUFVLElBQUksTUFBTSxJQUFJ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QUFDLEVBQUUsQ0FBQyxDQUFDLDFDQURDLFFBQ25DLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxMQUFILElBQUUsQ0FBQztJQUVPLG1CQUFtQixDQUFDLEVBQVUsMUJBRHhDLElBQ1UsbUJBQW1CLENBQUMsRUFBVTtRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyx0Q0FEUSxRQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDLExBQUgsSUFBRSxDQUFDO0NBQ0YsQ0FBQSxGQUFELENBQUM7NkRBeEMrQixTQUFTLE1BSDVCLHVCQUF1QixvQkFEbkMsVUFBVSxFQUFFLElBQ0E7QUFBdUIsQ0EyQ25DLFdBM0NZLHVCQUF1Qiw4SEEyQ25DO0FBQ0Q7QUFBaUQsWUF6Q2pCLFNBQVM7QUFBRztBQUgvQix1QkFBdUIsb0JBRG5DLFVBQVUsRUFBRSxJQUNBO0FBQXVCLENBMkNuQzswRUFDRDs7QUEvQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hHYWxsZXJ5SGVscGVyU2VydmljZSB7XG4gIHByaXZhdGUgc3dpcGVIYW5kbGVyczogTWFwPHN0cmluZywgRnVuY3Rpb25bXT4gPSBuZXcgTWFwPHN0cmluZywgRnVuY3Rpb25bXT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbWFuYWdlU3dpcGUoc3RhdHVzOiBib29sZWFuLCBlbGVtZW50OiBFbGVtZW50UmVmLCBpZDogc3RyaW5nLCBuZXh0SGFuZGxlcjogRnVuY3Rpb24sIHByZXZIYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQge1xuXG4gICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuZ2V0U3dpcGVIYW5kbGVycyhpZCk7XG5cbiAgICAgIC8vIHN3aXBlbGVmdCBhbmQgc3dpcGVyaWdodCBhcmUgYXZhaWxhYmxlIG9ubHkgaWYgaGFtbWVyanMgaXMgaW5jbHVkZWRcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHN0YXR1cyAmJiAhaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgdGhpcy5zd2lwZUhhbmRsZXJzLnNldChpZCwgW1xuICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnc3dpcGVsZWZ0JywgKCkgPT4gbmV4dEhhbmRsZXIoKSksXG4gICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzd2lwZXJpZ2h0JywgKCkgPT4gcHJldkhhbmRsZXIoKSlcbiAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdHVzICYmIGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLm1hcCgoaGFuZGxlcikgPT4gaGFuZGxlcigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTd2lwZUhhbmRsZXJzKGlkKTtcbiAgICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgdmFsaWRhdGVVcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgaWYgKHVybC5yZXBsYWNlKSB7XG4gICAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKG5ldyBSZWdFeHAoJyAnLCAnZycpLCAnJTIwJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFwnJywgJ2cnKSwgJyUyNycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuICB9XG5cbiAgZ2V0QmFja2dyb3VuZFVybChpbWFnZTogc3RyaW5nKSB7XG4gICAgICByZXR1cm4gJ3VybChcXCcnICsgdGhpcy52YWxpZGF0ZVVybChpbWFnZSkgKyAnXFwnKSc7XG4gIH1cblxuICBwcml2YXRlIGdldFN3aXBlSGFuZGxlcnMoaWQ6IHN0cmluZyk6IEZ1bmN0aW9uW10gfCB1bmRlZmluZWQge1xuICAgICAgcmV0dXJuIHRoaXMuc3dpcGVIYW5kbGVycy5nZXQoaWQpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVTd2lwZUhhbmRsZXJzKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgIHRoaXMuc3dpcGVIYW5kbGVycy5kZWxldGUoaWQpO1xuICB9XG59XG4iXX0=